using UnityEngine;  public class Controller2D : RaycastController {     public CollisionInfo collisions;     [HideInInspector]     public Vector2 playerInput;      public override void Start()     {         base.Start();          collisions.faceDir = 1;     }      public void Move(Vector2 moveAmount, bool standingOnPlatform = false)     {         Move(moveAmount, Vector2.zero, standingOnPlatform);     }      public void Move(Vector2 moveAmount, Vector2 input, bool standingOnPlatform = false)     {         UpdateRaycastOrigins();         collisions.Reset();         collisions.moveAmountOld = moveAmount;         playerInput = input;          if (moveAmount.y != 0)         {             VerticalCollisions(ref moveAmount);         }          transform.Translate(moveAmount);          if (standingOnPlatform)         {             collisions.below = true;         }     }

    private void HorizontalCollisions(ref Vector2 moveAmount)     {         float directionX = collisions.faceDir;         float rayLength = Mathf.Abs(moveAmount.x) + skinWidth;          for (int i = 0; i < horizontalRayCount; i++)         {             Vector2 rayOrigin = (directionX == -1) ? raycastOrigins.bottomLeft : raycastOrigins.bottomRight;             rayOrigin += Vector2.up * (horizontalRaySpacing * i);             RaycastHit2D hit = Physics2D.Raycast(rayOrigin, Vector2.right * directionX, rayLength, collisionMask);              Debug.DrawRay(rayOrigin, Vector2.right * directionX, Color.red);              if (hit)             {                 if (collisions.collidedObj != hit.collider.gameObject)                 {                     collisions.collidedObj = hit.collider.gameObject;                     onCollisionObject(collisions.collidedObj);                 }             }         }     }       private void VerticalCollisions(ref Vector2 moveAmount)     {         float directionY = Mathf.Sign(moveAmount.y);         float rayLength = Mathf.Abs(moveAmount.y) + skinWidth;          for (int i = 0; i < verticalRayCount; i++)         {             Vector2 rayOrigin = (directionY == -1) ? raycastOrigins.bottomLeft : raycastOrigins.topLeft;             rayOrigin += Vector2.right * (verticalRaySpacing * i + moveAmount.x);             RaycastHit2D hit = Physics2D.Raycast(rayOrigin, Vector2.up * directionY, rayLength, collisionMask);              Debug.DrawRay(rayOrigin, Vector2.up * directionY, Color.red);              if (hit)             {                 if (collisions.collidedObj != hit.collider.gameObject)
                {
                    collisions.collidedObj = hit.collider.gameObject;
                    onCollisionObject(collisions.collidedObj);
                }                  moveAmount.y = (hit.distance - skinWidth) * directionY;                 rayLength = hit.distance;                  collisions.below = directionY == -1;                 collisions.above = directionY == 1;             }             else             {                 collisions.collidedObj = null;             }         }     }        /** Meter aqui funciones al chocar con objeto (segun su tag)      */     private void onCollisionObject(GameObject collidedObject)
    {
        switch (collidedObject.tag)
        {             case "deadly":                 Destroy(gameObject);                 break;
            default:                 break;
        }
    }     /**       */                    public struct CollisionInfo     {         public bool above, below;         public bool left, right;          public GameObject collidedObj;          public Vector2 moveAmountOld;         public int faceDir;           public void Reset()         {             above = below = false;             left = right = false;         }     } }  